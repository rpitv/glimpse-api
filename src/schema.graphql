scalar DateTime
scalar JSONObject
scalar EmailAddress
scalar File

"""
Applies authorization requirements to a field, argument, input field, or to all fields on an object/input object.
The current user must have the provided permission action, subject, and field. Subject and field are optional, but
action is required. When @Auth is applied multiple times to a single field/argument, the user must have all of the
permissions. There is currently no way to say that the user must have at least one of many permissions. This directive
has different behavior depending on where it is used.
- ARGUMENT: This is the simplest use-case. Whenever a user uses an argument, the directive makes sure that the user
has the provided permission. The subject is not applied to a specific object, but used generally.
- FIELD_DEFINITION: This is the most common use-case, but also perhaps the most complex. Whenever the user uses a field
with this directive, the user must have the provided permission both generally and specifically. If the subject matches
the name of the parent type (e.g., requesting 'id' on Role and subject is also 'Role'), then the user must have
permission to read that specific object. NOTE: There is currently not a good way to implement this with all relational
children resolved, without a hit to performance. For this reason, conditional permissions should not be based on
relational fields, as they are not guaranteed to be resolved by the time the permission is checked. If the subject does
not match the type name, then the permission is just checked generally (e.g., requesting 'person' on Role requires
permission to read the 'id' field on Person. This will just check that the user has permission to read _some_ Person's
id, but not necessarily this one. Specifically checking this person should be applied to the Person fields). When
checking the permission against the value, if the value is an array, each element of the array is checked. This could be
optimized by baking the checks into the individual resolvers and removing value checks from fields, if necessary,
however the current implementation insures against permission leaks on individual resolvers.
- INPUT_FIELD_DEFINITION: When applied to input object types, we're making one major (but fair) assumption: that the
type which it's being applied to is used to mutate or create another correspond type. For example, CreateRoleInput is
used to create a Role type. This means that the user must not only have permission to create some Role, but
specifically one with the values in the CreateRoleInput, as the permission is applied to the object directly. If this
is undesirable, you can probably accomplish what you want using a combination of FIELD_DEFINITION and ARGUMENT
@Auth directives, but if not, this could be fixed with a future update to the options to @Auth.
- OBJECT: This is an alias for applying the @Auth directive to each field of the type. This is combined with (not
overwritten by) any other @Auth directives applied to the field directly.
- INPUT_OBJECT: This is an alias for applying the @Auth directive to each field of the type. This is combined with (not
overwritten by) any other @Auth directives applied to the field directly.
"""
directive @Auth(action: AbilityActions!, subject: AbilitySubjects, field: String) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION | OBJECT | INPUT_OBJECT
"""
In the context of input types, a value being "required" is not sufficient enough to denote the difference between
nullable and non-nullable fields. This directive resolves this issue. For fields which are not required, but when they
are passed they must not be null, apply this directive. For fields which are required and must not be null, use both
this directive and the usual "!". This is technically the same as just using "!", but both are recommended for clarity.
As a result, there is currently no way in this implementation to allow for "required, but may be null", but it should
be possible in one way or another (modify AST code if you need to). Usage of @NonNull should almost always mirror the
database schema when used on CRUD inputs.

Track https://github.com/graphql/graphql-spec/issues/476 for a built-in specifier.
"""
directive @NonNull on INPUT_FIELD_DEFINITION

"""
A Permission is either a UserPermission or a GroupPermission. This is useful when retrieving what permissions
a user has if you don't care whether they're inherited from a group or not.
"""
union Permission = GroupPermission | UserPermission

enum AlertLogSeverity {
    INFO
    LOW
    MEDIUM
    HIGH
    CRITICAL
}

enum ProductionRSVPAttendanceState {
    YES
    NO
    MAYBE
}

enum VideoFormat {
    RTMP
    HLS
    EMBED
}

enum AbilitySubjects {
    AccessLog
    AlertLog
    Asset
    AuditLog
    BlogPost
    Category
    ContactSubmissionAssignee
    ContactSubmission
    Credit
    GroupPermission
    Group
    Image
    Person
    PersonImage
    ProductionImage
    ProductionRSVP
    ProductionTag
    ProductionVideo
    Production
    Redirect
    Role
    Stream
    UserGroup
    UserPermission
    User
    Video
    VoteResponse
    Vote
}

enum AbilityActions {
    read
    create
    update
    delete
    manage
}

"""
Input type used for pagination in multi-document searches. Offset-based OR cursor-based pagination can be
used, or both. This is fed to Prisma. https://www.prisma.io/docs/concepts/components/prisma-client/pagination
"""
input Pagination {
    """
    Number of documents to skip over. Must be an integer greater than or equal to 0 when used. As an example, if you
    have 10 documents numbered 1-10 and pass {skip: 5, take: 3}, then you will receive documents 6-8.
    """
    skip: Int @NonNull
    """
    Number of documents to fetch. Must be an integer greater than or equal to 1 when used.
    """
    take: Int! @NonNull
    """
    ID of the first document to fetch. If the document doesn't exist or you don't have permission, then it's location
    is "unknown", and an empty list will always be returned, since we cannot determine what comes before/after it. As
    an example, if you have 10 documents numbered 1-10 and pass {cursor: 5, take: 3}, then you will receive documents
    5-7.
    """
    cursor: ID @NonNull
}

type Query {
    """
    Get a list of access logs which the user currently has access to read.
    """
    findManyAccessLog(pagination: Pagination @Auth(action: read, subject: AccessLog, field: "id")): [AccessLog!]! @Auth(action: read, subject: AccessLog)
    """
    Get a single access log, given its ID, or null if that access log does not exist.
    """
    findOneAccessLog(id: ID! @Auth(action: read, subject: AccessLog, field: "id")): AccessLog @Auth(action: read, subject: AccessLog)
    """
    Count the number of access logs which the user currently has access to read.
    """
    countAccessLog: Int! @Auth(action: read, subject: AccessLog)
    """
    Get a list of alert logs which the user currently has access to read.
    """
    findManyAlertLog(pagination: Pagination @Auth(action: read, subject: AlertLog, field: "id")): [AlertLog!]! @Auth(action: read, subject: AlertLog)
    """
    Get a single alert log, given its ID, or null if that alert log does not exist.
    """
    findOneAlertLog(id: ID! @Auth(action: read, subject: AlertLog, field: "id")): AlertLog @Auth(action: read, subject: AlertLog)
    """
    Count the number of alert logs which the user currently has access to read.
    """
    countAlertLog: Int! @Auth(action: read, subject: AlertLog)
    """
    Get a list of assets which the user currently has access to read.
    """
    findManyAsset(pagination: Pagination @Auth(action: read, subject: Asset, field: "id")): [Asset!]! @Auth(action: read, subject: Asset)
    """
    Get a single asset, given its ID, or null if that asset does not exist.
    """
    findOneAsset(id: ID! @Auth(action: read, subject: Asset, field: "id")): Asset @Auth(action: read, subject: Asset)
    """
    Count the number of assets which the user currently has access to read.
    """
    countAsset: Int! @Auth(action: read, subject: Asset)
    """
    Get a list of audit logs which the user currently has access to read.
    """
    findManyAuditLog(pagination: Pagination @Auth(action: read, subject: AuditLog, field: "id")): [AuditLog!]! @Auth(action: read, subject: AuditLog)
    """
    Get a single audit log, given its ID, or null if that audit log does not exist.
    """
    findOneAuditLog(id: ID! @Auth(action: read, subject: AuditLog, field: "id")): AuditLog @Auth(action: read, subject: AuditLog)
    """
    Count the number of audit logs which the user currently has access to read.
    """
    countAuditLog: Int! @Auth(action: read, subject: AuditLog)
    """
    Get a list of blog posts which the user currently has access to read.
    """
    findManyBlogPost(pagination: Pagination @Auth(action: read, subject: BlogPost, field: "id")): [BlogPost!]! @Auth(action: read, subject: BlogPost)
    """
    Get a single blog post, given its ID, or null if that blog post does not exist.
    """
    findOneBlogPost(id: ID! @Auth(action: read, subject: BlogPost, field: "id")): BlogPost @Auth(action: read, subject: BlogPost)
    """
    Count the number of blog posts which the user currently has access to read.
    """
    countBlogPost: Int! @Auth(action: read, subject: BlogPost)
    """
    Get a list of categories which the user currently has access to read.
    """
    findManyCategory(pagination: Pagination @Auth(action: read, subject: Category, field: "id")): [Category!]! @Auth(action: read, subject: Category)
    """
    Get a single category, given its ID, or null if that category does not exist.
    """
    findOneCategory(id: ID! @Auth(action: read, subject: Category, field: "id")): Category @Auth(action: read, subject: Category)
    """
    Count the number of categories which the user currently has access to read.
    """
    countCategory: Int! @Auth(action: read, subject: Category)
    """
    Get a list of contact submission assignees which the user currently has access to read.
    """
    findManyContactSubmissionAssignee(pagination: Pagination @Auth(action: read, subject: ContactSubmissionAssignee, field: "id")): [ContactSubmissionAssignee!]! @Auth(action: read, subject: ContactSubmissionAssignee)
    """
    Get a single contact submission assignee, given its ID, or null if that contact submission assignee does not exist.
    """
    findOneContactSubmissionAssignee(id: ID! @Auth(action: read, subject: ContactSubmissionAssignee, field: "id")): ContactSubmissionAssignee @Auth(action: read, subject: ContactSubmissionAssignee)
    """
    Count the number of contact submission assignees which the user currently has access to read.
    """
    countContactSubmissionAssignee: Int! @Auth(action: read, subject: ContactSubmissionAssignee)
    """
    Get a list of contact submissions which the user currently has access to read.
    """
    findManyContactSubmission(pagination: Pagination @Auth(action: read, subject: ContactSubmission, field: "id")): [ContactSubmission!]! @Auth(action: read, subject: ContactSubmission)
    """
    Get a single contact submission, given its ID, or null if that contact submission does not exist.
    """
    findOneContactSubmission(id: ID! @Auth(action: read, subject: ContactSubmission, field: "id")): ContactSubmission @Auth(action: read, subject: ContactSubmission)
    """
    Count the number of contact submissions which the user currently has access to read.
    """
    countContactSubmission: Int! @Auth(action: read, subject: ContactSubmission)
    """
    Get a list of credits which the user currently has access to read.
    """
    findManyCredit(pagination: Pagination @Auth(action: read, subject: Credit, field: "id")): [Credit!]! @Auth(action: read, subject: Credit)
    """
    Get a single credit, given its ID, or null if that credit does not exist.
    """
    findOneCredit(id: ID! @Auth(action: read, subject: Credit, field: "id")): Credit @Auth(action: read, subject: Credit)
    """
    Count the number of credits which the user currently has access to read.
    """
    countCredit: Int! @Auth(action: read, subject: Credit)
    """
    Get a single group permission, given its ID, or null if that group permission does not exist.
    """
    findOneGroupPermission(id: ID! @Auth(action: read, subject: GroupPermission, field: "id")): GroupPermission @Auth(action: read, subject: GroupPermission)
    """
    Get a list of groups which the user currently has access to read.
    """
    findManyGroup(pagination: Pagination @Auth(action: read, subject: Group, field: "id")): [Group!]! @Auth(action: read, subject: Group)
    """
    Get a single group, given its ID, or null if that group does not exist.
    """
    findOneGroup(id: ID! @Auth(action: read, subject: Group, field: "id")): Group @Auth(action: read, subject: Group)
    """
    Count the number of groups which the user currently has access to read.
    """
    countGroup: Int! @Auth(action: read, subject: Group)
    """
    Get a list of images which the user currently has access to read.
    """
    findManyImage(pagination: Pagination @Auth(action: read, subject: Image, field: "id")): [Image!]! @Auth(action: read, subject: Image)
    """
    Get a single image, given its ID, or null if that image does not exist.
    """
    findOneImage(id: ID! @Auth(action: read, subject: Image, field: "id")): Image @Auth(action: read, subject: Image)
    """
    Count the number of images which the user currently has access to read.
    """
    countImage: Int! @Auth(action: read, subject: Image)
    """
    Get a list of people which the user currently has access to read.
    """
    findManyPerson(pagination: Pagination @Auth(action: read, subject: Person, field: "id")): [Person!]! @Auth(action: read, subject: Person)
    """
    Get a single person, given its ID, or null if that person does not exist.
    """
    findOnePerson(id: ID! @Auth(action: read, subject: Person, field: "id")): Person @Auth(action: read, subject: Person)
    """
    Count the number of people which the user currently has access to read.
    """
    countPerson: Int! @Auth(action: read, subject: Person)
    """
    Get a list of person-image pairs which the user currently has access to read.
    """
    findManyPersonImage(pagination: Pagination @Auth(action: read, subject: PersonImage, field: "id")): [PersonImage!]! @Auth(action: read, subject: PersonImage)
    """
    Get a single person-image pair, given its ID, or null if that person-image pair does not exist.
    """
    findOnePersonImage(id: ID! @Auth(action: read, subject: PersonImage, field: "id")): PersonImage @Auth(action: read, subject: PersonImage)
    """
    Count the number of person-image pairs which the user currently has access to read.
    """
    countPersonImage: Int! @Auth(action: read, subject: PersonImage)
    """
    Get a list of production-image pairs which the user currently has access to read.
    """
    findManyProductionImage(pagination: Pagination @Auth(action: read, subject: ProductionImage, field: "id")): [ProductionImage!]! @Auth(action: read, subject: ProductionImage)
    """
    Get a single production-image pair, given its ID, or null if that production-image pair does not exist.
    """
    findOneProductionImage(id: ID! @Auth(action: read, subject: ProductionImage, field: "id")): ProductionImage @Auth(action: read, subject: ProductionImage)
    """
    Count the number of production-image pairs which the user currently has access to read.
    """
    countProductionImage: Int! @Auth(action: read, subject: ProductionImage)
    """
    Get a list of production RSVPs which the user currently has access to read.
    """
    findManyProductionRSVP(pagination: Pagination @Auth(action: read, subject: ProductionRSVP, field: "id")): [ProductionRSVP!]! @Auth(action: read, subject: ProductionRSVP)
    """
    Get a single production RSVP, given its ID, or null if that production RSVP does not exist.
    """
    findOneProductionRSVP(id: ID! @Auth(action: read, subject: ProductionRSVP, field: "id")): ProductionRSVP @Auth(action: read, subject: ProductionRSVP)
    """
    Count the number of production RSVPs which the user currently has access to read.
    """
    countProductionRSVP: Int! @Auth(action: read, subject: ProductionRSVP)
    """
    Get a single production tag, given its ID, or null if that production tag does not exist.
    """
    findOneProductionTag(id: ID! @Auth(action: read, subject: ProductionTag, field: "id")): ProductionTag @Auth(action: read, subject: ProductionTag)
    """
    Get a list of production-video pairs which the user currently has access to read.
    """
    findManyProductionVideo(pagination: Pagination @Auth(action: read, subject: ProductionVideo, field: "id")): [ProductionVideo!]! @Auth(action: read, subject: ProductionVideo)
    """
    Get a single production-video pair, given its ID, or null if that production-video pair does not exist.
    """
    findOneProductionVideo(id: ID! @Auth(action: read, subject: ProductionVideo, field: "id")): ProductionVideo @Auth(action: read, subject: ProductionVideo)
    """
    Count the number of production-video pairs which the user currently has access to read.
    """
    countProductionVideo: Int! @Auth(action: read, subject: ProductionVideo)
    """
    Get a list of productions which the user currently has access to read.
    """
    findManyProduction(pagination: Pagination @Auth(action: read, subject: Production, field: "id")): [Production!]! @Auth(action: read, subject: Production)
    """
    Get a single production, given its ID, or null if that production does not exist.
    """
    findOneProduction(id: ID! @Auth(action: read, subject: Production, field: "id")): Production @Auth(action: read, subject: Production)
    """
    Count the number of productions which the user currently has access to read.
    """
    countProduction: Int! @Auth(action: read, subject: Production)
    """
    Get a list of redirects which the user currently has access to read.
    """
    findManyRedirect(pagination: Pagination @Auth(action: read, subject: Redirect, field: "id")): [Redirect!]! @Auth(action: read, subject: Redirect)
    """
    Get a single production, given its ID, or null if that redirect does not exist.
    """
    findOneRedirect(id: ID! @Auth(action: read, subject: Redirect, field: "id")): Redirect @Auth(action: read, subject: Redirect)
    """
    Count the number of redirects which the user currently has access to read.
    """
    countRedirect: Int! @Auth(action: read, subject: Redirect)
    """
    Get a list of roles which the user currently has access to read.
    """
    findManyRole(pagination: Pagination @Auth(action: read, subject: Role, field: "id")): [Role!]! @Auth(action: read, subject: Role)
    """
    Get a single role, given its ID, or null if that role does not exist.
    """
    findOneRole(id: ID! @Auth(action: read, subject: Role, field: "id")): Role @Auth(action: read, subject: Role)
    """
    Count the number of roles which the user currently has access to read.
    """
    countRole: Int! @Auth(action: read, subject: Role)
    """
    Get a single user-group pair, given its ID, or null if that user-group pair does not exist.
    """
    findOneUserGroup(id: ID! @Auth(action: read, subject: UserGroup, field: "id")): UserGroup @Auth(action: read, subject: UserGroup)
    """
    Get a single user permission, given its ID, or null if that user permission does not exist.
    """
    findOneUserPermission(id: ID! @Auth(action: read, subject: UserPermission, field: "id")): UserPermission @Auth(action: read, subject: UserPermission)
    """
    Get a list of users which the user currently has access to read.
    """
    findManyUser(pagination: Pagination @Auth(action: read, subject: User, field: "id")): [User!]! @Auth(action: read, subject: User)
    """
    Get a single user given their ID, or null if that user does not exist.
    """
    findOneUser(id: ID! @Auth(action: read, subject: User, field: "id")): User @Auth(action: read, subject: User)
    """
    Count the number of users which the user currently has access to read.
    """
    countUser: Int! @Auth(action: read, subject: User)
    """
    Get a list of videos which the user currently has access to read.
    """
    findManyVideo(pagination: Pagination @Auth(action: read, subject: Video, field: "id")): [Video!]! @Auth(action: read, subject: Video)
    """
    Get a single video, given its ID, or null if that video does not exist.
    """
    findOneVideo(id: ID! @Auth(action: read, subject: Video, field: "id")): Video @Auth(action: read, subject: Video)
    """
    Count the number of videos which the user currently has access to read.
    """
    countVideo: Int! @Auth(action: read, subject: Video)
    """
    Get a single vote response, given its ID, or null if that vote response does not exist.
    """
    findOneVoteResponse(id: ID! @Auth(action: read, subject: VoteResponse, field: "id")): VoteResponse @Auth(action: read, subject: VoteResponse)
    """
    Get a list of votes which the user currently has access to read.
    """
    findManyVote(pagination: Pagination @Auth(action: read, subject: Vote, field: "id")): [Vote!]! @Auth(action: read, subject: Vote)
    """
    Get a single vote, given its ID, or null if that vote does not exist.
    """
    findOneVote(id: ID! @Auth(action: read, subject: Vote, field: "id")): Vote @Auth(action: read, subject: Vote)
    """
    Count the number of votes which the user currently has access to read.
    """
    countVote: Int! @Auth(action: read, subject: Vote)

    # -----------------------------------------------------------------------------------------------------------------
    # Custom methods
    # -----------------------------------------------------------------------------------------------------------------

    """
    Get the permissions that the current user has, including permissions inherited from groups.
    """
    permissionsFor(user: ID @Auth(action: read, subject: User, field: "id")): [Permission!]!
    """
    Get the currently signed in User. Null if the user is not signed in.
    """
    self: User @Auth(action: read, subject: User)
    """
    Get the list of currently running RTMP streams.
    """
    streams: [Stream!]! @Auth(action: read, subject: Stream)
}

type Mutation {
    # Access Logs cannot be created, deleted, or updated.

    # Alert Logs can be created (may be useful for custom events), but not updated or deleted.
    """
    Create a new AlertLog with the given input values.
    """
    createAlertLog(input: AlertLogCreateInput!): AlertLog! @Auth(action: create, subject: AlertLog)

    """
    Create a new Asset with the given input values.
    """
    createAsset(input: AssetCreateInput!): Asset! @Auth(action: create, subject: Asset)
    """
    Update the Asset with the provided ID to have the passed values. Throws an error if Asset with ID does not exist.
    """
    updateAsset(id: ID! @Auth(action: read, subject: Asset, field: "id"), input: AssetUpdateInput!): Asset! @Auth(action: update, subject: Asset)
    """
    Delete the Asset with the provided ID, if it exists. Returns null if the Asset does not exist, otherwise returns the deleted object.
    """
    deleteAsset(id: ID!): Asset @Auth(action: delete, subject: Asset)

    # Audit logs cannot be created, deleted, or updated.

    """
    Create a new BlogPost with the given input values.
    """
    createBlogPost(input: BlogPostCreateInput!): BlogPost! @Auth(action: create, subject: BlogPost)
    """
    Update the BlogPost with the provided ID to have the passed values. Throws an error if BlogPost with ID does not exist.
    """
    updateBlogPost(id: ID! @Auth(action: read, subject: BlogPost, field: "id"), input: BlogPostUpdateInput!): BlogPost! @Auth(action: update, subject: BlogPost)
    """
    Delete the BlogPost with the provided ID, if it exists. Returns null if the BlogPost does not exist, otherwise returns the deleted object.
    """
    deleteBlogPost(id: ID!): BlogPost @Auth(action: delete, subject: BlogPost)

    """
    Create a new Category with the given input values.
    """
    createCategory(input: CategoryCreateInput!): Category! @Auth(action: create, subject: Category)
    """
    Update the Category with the provided ID to have the passed values. Throws an error if Category with ID does not exist.
    """
    updateCategory(id: ID! @Auth(action: read, subject: Category, field: "id"), input: CategoryUpdateInput!): Category! @Auth(action: update, subject: Category)
    """
    Delete the Category with the provided ID, if it exists. Returns null if the Category does not exist, otherwise returns the deleted object.
    """
    deleteCategory(id: ID!): Category @Auth(action: delete, subject: Category)

    # Contact submission assignees cannot be updated. Delete and recreate instead.
    """
    Create a new ContactSubmissionAssignee with the given input values.
    """
    createContactSubmissionAssignee(input: ContactSubmissionAssigneeCreateInput!): ContactSubmissionAssignee! @Auth(action: create, subject: ContactSubmissionAssignee)
    """
    Delete the ContactSubmissionAssignee with the provided ID, if it exists. Returns null if the ContactSubmissionAssignee does not exist, otherwise returns the deleted object.
    """
    deleteContactSubmissionAssignee(id: ID!): ContactSubmissionAssignee @Auth(action: delete, subject: ContactSubmissionAssignee)

    """
    Create a new ContactSubmission with the given input values.
    """
    createContactSubmission(input: ContactSubmissionCreateInput!): ContactSubmission! @Auth(action: create, subject: ContactSubmission)
    """
    Update the ContactSubmission with the provided ID to have the passed values. Throws an error if ContactSubmission with ID does not exist.
    """
    updateContactSubmission(id: ID! @Auth(action: read, subject: ContactSubmission, field: "id"), input: ContactSubmissionUpdateInput!): ContactSubmission! @Auth(action: update, subject: ContactSubmission)
    """
    Delete the ContactSubmission with the provided ID, if it exists. Returns null if the ContactSubmission does not exist, otherwise returns the deleted object.
    """
    deleteContactSubmission(id: ID!): ContactSubmission @Auth(action: delete, subject: ContactSubmission)

    """
    Create a new Credit with the given input values.
    """
    createCredit(input: CreditCreateInput!): Credit! @Auth(action: create, subject: Credit)
    """
    Update the Credit with the provided ID to have the passed values. Throws an error if Credit with ID does not exist.
    """
    updateCredit(id: ID! @Auth(action: read, subject: Credit, field: "id"), input: CreditUpdateInput!): Credit! @Auth(action: update, subject: Credit)
    """
    Delete the Credit with the provided ID, if it exists. Returns null if the Credit does not exist, otherwise returns the deleted object.
    """
    deleteCredit(id: ID!): Credit @Auth(action: delete, subject: Credit)

    """
    Create a new GroupPermission with the given input values.
    """
    createGroupPermission(input: GroupPermissionCreateInput!): GroupPermission! @Auth(action: create, subject: GroupPermission)
    """
    Update the GroupPermission with the provided ID to have the passed values. Throws an error if GroupPermission with ID does not exist.
    """
    updateGroupPermission(id: ID! @Auth(action: read, subject: GroupPermission, field: "id"), input: GroupPermissionUpdateInput!): GroupPermission! @Auth(action: update, subject: GroupPermission)
    """
    Delete the GroupPermission with the provided ID, if it exists. Returns null if the GroupPermission does not exist, otherwise returns the deleted object.
    """
    deleteGroupPermission(id: ID!): GroupPermission @Auth(action: delete, subject: GroupPermission)

    """
    Create a new Group with the given input values.
    """
    createGroup(input: GroupCreateInput!): Group! @Auth(action: create, subject: Group)
    """
    Update the Group with the provided ID to have the passed values. Throws an error if Group with ID does not exist.
    """
    updateGroup(id: ID! @Auth(action: read, subject: Group, field: "id"), input: GroupUpdateInput!): Group! @Auth(action: update, subject: Group)
    """
    Delete the Group with the provided ID, if it exists. Returns null if the Group does not exist, otherwise returns the deleted object.
    """
    deleteGroup(id: ID!): Group @Auth(action: delete, subject: Group)

    """
    Create a new Image with the given input values.
    """
    createImage(input: ImageCreateInput!): Image! @Auth(action: create, subject: Image)
    """
    Update the Image with the provided ID to have the passed values. Throws an error if Image with ID does not exist.
    """
    updateImage(id: ID! @Auth(action: read, subject: Image, field: "id"), input: ImageUpdateInput!): Image! @Auth(action: update, subject: Image)
    """
    Delete the Image with the provided ID, if it exists. Returns null if the Image does not exist, otherwise returns the deleted object.
    """
    deleteImage(id: ID!): Image @Auth(action: delete, subject: Image)

    """
    Create a new Person with the given input values.
    """
    createPerson(input: PersonCreateInput!): Person! @Auth(action: create, subject: Person)
    """
    Update the Person with the provided ID to have the passed values. Throws an error if Person with ID does not exist.
    """
    updatePerson(id: ID! @Auth(action: read, subject: Person, field: "id"), input: PersonUpdateInput!): Person! @Auth(action: update, subject: Person)
    """
    Delete the Person with the provided ID, if it exists. Returns null if the Person does not exist, otherwise returns the deleted object.
    """
    deletePerson(id: ID!): Person @Auth(action: delete, subject: Person)

    """
    Create a new PersonImage with the given input values.
    """
    createPersonImage(input: PersonImageCreateInput!): PersonImage! @Auth(action: create, subject: PersonImage)
    """
    Update the PersonImage with the provided ID to have the passed values. Throws an error if PersonImage with ID does not exist.
    """
    updatePersonImage(id: ID! @Auth(action: read, subject: PersonImage, field: "id"), input: PersonImageUpdateInput!): PersonImage! @Auth(action: update, subject: PersonImage)
    """
    Delete the PersonImage with the provided ID, if it exists. Returns null if the PersonImage does not exist, otherwise returns the deleted object.
    """
    deletePersonImage(id: ID!): PersonImage @Auth(action: delete, subject: PersonImage)

    """
    Create a new ProductionImage with the given input values.
    """
    createProductionImage(input: ProductionImageCreateInput!): ProductionImage! @Auth(action: create, subject: ProductionImage)
    """
    Update the ProductionImage with the provided ID to have the passed values. Throws an error if ProductionImage with ID does not exist.
    """
    updateProductionImage(id: ID! @Auth(action: read, subject: ProductionImage, field: "id"), input: ProductionImageUpdateInput!): ProductionImage! @Auth(action: update, subject: ProductionImage)
    """
    Delete the ProductionImage with the provided ID, if it exists. Returns null if the ProductionImage does not exist, otherwise returns the deleted object.
    """
    deleteProductionImage(id: ID!): ProductionImage @Auth(action: delete, subject: ProductionImage)

    """
    Create a new ProductionRSVP with the given input values.
    """
    createProductionRSVP(input: ProductionRSVPCreateInput!): ProductionRSVP! @Auth(action: create, subject: ProductionRSVP)
    """
    Update the ProductionRSVP with the provided ID to have the passed values. Throws an error if ProductionRSVP with ID does not exist.
    """
    updateProductionRSVP(id: ID! @Auth(action: read, subject: ProductionRSVP, field: "id"), input: ProductionRSVPUpdateInput!): ProductionRSVP! @Auth(action: update, subject: ProductionRSVP)
    """
    Delete the ProductionRSVP with the provided ID, if it exists. Returns null if the ProductionRSVP does not exist, otherwise returns the deleted object.
    """
    deleteProductionRSVP(id: ID!): ProductionRSVP @Auth(action: delete, subject: ProductionRSVP)

    # Production tags cannot be updated. Delete and recreate instead.
    """
    Create a new ProductionTag with the given input values.
    """
    createProductionTag(input: ProductionTagCreateInput!): ProductionTag! @Auth(action: create, subject: ProductionTag)
    """
    Delete the ProductionTag with the provided ID, if it exists. Returns null if the ProductionTag does not exist, otherwise returns the deleted object.
    """
    deleteProductionTag(id: ID!): ProductionTag @Auth(action: delete, subject: ProductionTag)

    """
    Create a new ProductionVideo with the given input values.
    """
    createProductionVideo(input: ProductionVideoCreateInput!): ProductionVideo! @Auth(action: create, subject: ProductionVideo)
    """
    Update the ProductionVideo with the provided ID to have the passed values. Throws an error if ProductionVideo with ID does not exist.
    """
    updateProductionVideo(id: ID! @Auth(action: read, subject: ProductionVideo, field: "id"), input: ProductionVideoUpdateInput!): ProductionVideo! @Auth(action: update, subject: ProductionVideo)
    """
    Delete the ProductionVideo with the provided ID, if it exists. Returns null if the ProductionVideo does not exist, otherwise returns the deleted object.
    """
    deleteProductionVideo(id: ID!): ProductionVideo @Auth(action: delete, subject: ProductionVideo)

    """
    Create a new Production with the given input values.
    """
    createProduction(input: ProductionCreateInput!): Production! @Auth(action: create, subject: Production)
    """
    Update the Production with the provided ID to have the passed values. Throws an error if Production with ID does not exist.
    """
    updateProduction(id: ID! @Auth(action: read, subject: Production, field: "id"), input: ProductionUpdateInput!): Production! @Auth(action: update, subject: Production)
    """
    Delete the Production with the provided ID, if it exists. Returns null if the Production does not exist, otherwise returns the deleted object.
    """
    deleteProduction(id: ID!): Production @Auth(action: delete, subject: Production)

    """
    Create a new Redirect with the given input values.
    """
    createRedirect(input: RedirectCreateInput!): Redirect! @Auth(action: create, subject: Redirect)
    """
    Update the Redirect with the provided ID to have the passed values. Throws an error if Redirect with ID does not exist.
    """
    updateRedirect(id: ID! @Auth(action: read, subject: Redirect, field: "id"), input: RedirectUpdateInput!): Redirect! @Auth(action: update, subject: Redirect)
    """
    Delete the Redirect with the provided ID, if it exists. Returns null if the Redirect does not exist, otherwise returns the deleted object.
    """
    deleteRedirect(id: ID!): Redirect @Auth(action: delete, subject: Redirect)

    """
    Create a new Role with the given input values.
    """
    createRole(input: RoleCreateInput!): Role! @Auth(action: create, subject: Role)
    """
    Update the Role with the provided ID to have the passed values. Throws an error if Role with ID does not exist.
    """
    updateRole(id: ID! @Auth(action: read, subject: Role, field: "id"), input: RoleUpdateInput!): Role! @Auth(action: update, subject: Role)
    """
    Delete the Role with the provided ID, if it exists. Returns null if the Role does not exist, otherwise returns the deleted object.
    """
    deleteRole(id: ID!): Role @Auth(action: delete, subject: Role)

    # User groups cannot be updated. Delete and recreate instead.
    """
    Create a new user-group pair with the given input values.
    """
    createUserGroup(input: UserGroupCreateInput!): UserGroup! @Auth(action: create, subject: UserGroup)
    """
    Delete the UserGroup with the provided ID, if it exists. Returns null if the UserGroup does not exist, otherwise returns the deleted object.
    """
    deleteUserGroup(id: ID!): UserGroup @Auth(action: delete, subject: UserGroup)

    """
    Create a new UserPermission with the given input values. The User creating the Permission must also have the Permission that's being created.
    """
    createUserPermission(input: UserPermissionCreateInput!): UserPermission! @Auth(action: create, subject: UserPermission)
    """
    Update the UserPermission with the provided ID to have the passed values. Throws an error if UserPermission with ID does not exist. The User updating the Permission must also have the Permission that's being update to and from..
    """
    updateUserPermission(id: ID! @Auth(action: read, subject: UserPermission, field: "id"), input: UserPermissionUpdateInput!): UserPermission! @Auth(action: update, subject: UserPermission)
    """
    Delete the UserPermission with the provided ID, if it exists. Returns null if the UserPermission does not exist, otherwise returns the deleted object.
    """
    deleteUserPermission(id: ID!): UserPermission @Auth(action: delete, subject: UserPermission)

    """
    Create a new User with the given input values.
    """
    createUser(input: UserCreateInput!): User! @Auth(action: create, subject: User)
    """
    Update the User with the provided ID to have the passed values. Throws an error if User with ID does not exist.
    """
    updateUser(id: ID! @Auth(action: read, subject: User, field: "id"), input: UserUpdateInput!): User! @Auth(action: update, subject: User)
    """
    Delete the User with the provided ID, if it exists. Returns null if the User does not exist, otherwise returns the deleted object.
    """
    deleteUser(id: ID!): User @Auth(action: delete, subject: User)

    """
    Create a new Video with the given input values.
    """
    createVideo(input: VideoCreateInput!): Video! @Auth(action: create, subject: Video)
    """
    Update the Video with the provided ID to have the passed values. Throws an error if Video with ID does not exist.
    """
    updateVideo(id: ID! @Auth(action: read, subject: Video, field: "id"), input: VideoUpdateInput!): Video! @Auth(action: update, subject: Video)
    """
    Delete the Video with the provided ID, if it exists. Returns null if the Video does not exist, otherwise returns the deleted object.
    """
    deleteVideo(id: ID!): Video @Auth(action: delete, subject: Video)

    """
    Create a new VoteResponse with the given input values.
    """
    createVoteResponse(input: VoteResponseCreateInput!): VoteResponse! @Auth(action: create, subject: VoteResponse)
    """
    Update the VoteResponse with the provided ID to have the passed values. Throws an error if VoteResponse with ID does not exist.
    """
    updateVoteResponse(id: ID! @Auth(action: read, subject: VoteResponse, field: "id"), input: VoteResponseUpdateInput!): VoteResponse! @Auth(action: update, subject: VoteResponse)
    """
    Delete the VoteResponse with the provided ID, if it exists. Returns null if the VoteResponse does not exist, otherwise returns the deleted object.
    """
    deleteVoteResponse(id: ID!): VoteResponse @Auth(action: delete, subject: VoteResponse)

    """
    Create a new Vote with the given input values.
    """
    createVote(input: VoteCreateInput!): Vote! @Auth(action: create, subject: Vote)
    """
    Update the Vote with the provided ID to have the passed values. Throws an error if Vote with ID does not exist.
    """
    updateVote(id: ID! @Auth(action: read, subject: Vote, field: "id"), input: VoteUpdateInput!): Vote! @Auth(action: update, subject: Vote)
    """
    Delete the Vote with the provided ID, if it exists. Returns null if the Vote does not exist, otherwise returns the deleted object.
    """
    deleteVote(id: ID!): Vote @Auth(action: delete, subject: Vote)

    # -----------------------------------------------------------------------------------------------------------------
    # Custom methods
    # -----------------------------------------------------------------------------------------------------------------

    """
    Attempt to login with the given credentials. Returns true if successful, false otherwise. The current session cookie is updated to be for the newly logged in user, or a new cookie is created if one wasn't sent with the request.
    """
    usernameLogin(username: String!, password: String!): Boolean!
    """
    Log out the current user. The current session cookie is deleted, even if the user wasn't logged in. Returns true if successful, false otherwise.
    """
    logout: Boolean!

    createStream(input: StreamCreateInput!): Boolean! @Auth(action: create, subject: Stream)
    deleteStream(id: ID!): Boolean! @Auth(action: delete, subject: Stream)
}

type AccessLog {
    id: ID! @Auth(action: read, subject: AccessLog, field: "id")
    user: User! @Auth(action: read, subject: AccessLog, field: "user") @Auth(action: read, subject: User)
    service: String! @Auth(action: read, subject: AccessLog, field: "service")
    timestamp: DateTime! @Auth(action: read, subject: AccessLog, field: "timestamp")
    ip: String @Auth(action: read, subject: AccessLog, field: "ip")
}

type AlertLog {
    id: ID! @Auth(action: read, subject: AlertLog, field: "id")
    message: String! @Auth(action: read, subject: AlertLog, field: "message")
    severity: AlertLogSeverity! @Auth(action: read, subject: AlertLog, field: "severity")
    timestamp: DateTime! @Auth(action: read, subject: AlertLog, field: "timestamp")
}

input AlertLogCreateInput {
    message: String! @NonNull @Auth(action: create, subject: AlertLog, field: "message")
    severity: AlertLogSeverity! @NonNull @Auth(action: create, subject: AlertLog, field: "severity")
}

type Asset {
    id: ID! @Auth(action: read, subject: Asset, field: "id")
    tag: Int @Auth(action: read, subject: Asset, field: "tag")
    name: String! @Auth(action: read, subject: Asset, field: "name")
    lastKnownLocation: String @Auth(action: read, subject: Asset, field: "lastKnownLocation")
    lastKnownHandler: User @Auth(action: read, subject: Asset, field: "lastKnownHandler")  @Auth(action: read, subject: User)
    isLost: Boolean! @Auth(action: read, subject: Asset, field: "isLost")
    notes: String @Auth(action: read, subject: Asset, field: "notes")
    purchasePrice: Int @Auth(action: read, subject: Asset, field: "purchasePrice")
    purchaseLocation: String @Auth(action: read, subject: Asset, field: "purchaseLocation")
    purchaseDate: DateTime @Auth(action: read, subject: Asset, field: "purchaseDate")
    modelNumber: String @Auth(action: read, subject: Asset, field: "modelNumber")
    serialNumber: String @Auth(action: read, subject: Asset, field: "serialNumber")
    parent: Asset @Auth(action: read, subject: Asset, field: "parent")
    children: [Asset!] @Auth(action: read, subject: Asset, field: "children")
}

input AssetCreateInput {
    tag: Int @NonNull @Auth(action: create, subject: Asset, field: "tag")
    name: String! @NonNull @Auth(action: create, subject: Asset, field: "name")
    lastKnownLocation: String @Auth(action: create, subject: Asset, field: "lastKnownLocation")
    lastKnownHandlerId: ID @Auth(action: create, subject: Asset, field: "lastKnownHandler") @Auth(action: read, subject: User, field: "id")
    """Defaults to false."""
    isLost: Boolean! = false @NonNull @Auth(action: create, subject: Asset, field: "isLost")
    notes: String @Auth(action: create, subject: Asset, field: "notes")
    purchasePrice: Int @Auth(action: create, subject: Asset, field: "purchasePrice")
    purchaseLocation: String @Auth(action: create, subject: Asset, field: "purchaseLocation")
    purchaseDate: DateTime @Auth(action: create, subject: Asset, field: "purchaseDate")
    modelNumber: String @Auth(action: create, subject: Asset, field: "modelNumber")
    serialNumber: String @Auth(action: create, subject: Asset, field: "serialNumber")
    parentId: ID @Auth(action: create, subject: Asset, field: "parent") @Auth(action: read, subject: Asset, field: "id")
}

input AssetUpdateInput {
    tag: Int @Auth(action: update, subject: Asset, field: "tag")
    name: String @NonNull @Auth(action: update, subject: Asset, field: "name")
    lastKnownLocation: String @Auth(action: update, subject: Asset, field: "lastKnownLocation")
    lastKnownHandlerId: ID @Auth(action: update, subject: Asset, field: "lastKnownHandler") @Auth(action: read, subject: User, field: "id")
    isLost: Boolean @NonNull @Auth(action: update, subject: Asset, field: "isLost")
    notes: String @Auth(action: update, subject: Asset, field: "notes")
    purchasePrice: Int @Auth(action: update, subject: Asset, field: "purchasePrice")
    purchaseLocation: String @Auth(action: update, subject: Asset, field: "purchaseLocation")
    purchaseDate: DateTime @Auth(action: update, subject: Asset, field: "purchaseDate")
    modelNumber: String @Auth(action: update, subject: Asset, field: "modelNumber")
    serialNumber: String @Auth(action: update, subject: Asset, field: "serialNumber")
    parentId: ID @Auth(action: update, subject: Asset, field: "parent") @Auth(action: read, subject: Asset, field: "id")
}

type AuditLog {
    id: ID! @Auth(action: read, subject: AuditLog, field: "id")
    user: User @Auth(action: read, subject: AuditLog, field: "user") @Auth(action: read, subject: User)
    timestamp: DateTime! @Auth(action: read, subject: AuditLog, field: "timestamp")
    modificationType: String! @Auth(action: read, subject: AuditLog, field: "modificationType")
    modifiedTable: String @Auth(action: read, subject: AuditLog, field: "modifiedTable")
    modifiedField: String! @Auth(action: read, subject: AuditLog, field: "modifiedField")
    previousValue: String @Auth(action: read, subject: AuditLog, field: "previousValue")
    comment: String @Auth(action: read, subject: AuditLog, field: "comment")
    metadata: JSONObject @Auth(action: read, subject: AuditLog, field: "metadata")
}

type BlogPost {
    id: ID! @Auth(action: read, subject: BlogPost, field: "id")
    postedAt: DateTime! @Auth(action: read, subject: BlogPost, field: "postedAt")
    content: String! @Auth(action: read, subject: BlogPost, field: "content")
    author: Person! @Auth(action: read, subject: BlogPost, field: "author") @Auth(action: read, subject: Person)
    authorDisplayName: String @Auth(action: read, subject: BlogPost, field: "authorDisplayName")
    title: String! @Auth(action: read, subject: BlogPost, field: "title")
}

input BlogPostCreateInput {
    content: String! @NonNull @Auth(action: create, subject: BlogPost, field: "content")
    authorId: ID! @NonNull @Auth(action: create, subject: BlogPost, field: "author") @Auth(action: read, subject: Person, field: "id")
    authorDisplayName: String @Auth(action: create, subject: BlogPost, field: "authorDisplayName")
    title: String! @NonNull @Auth(action: create, subject: BlogPost, field: "title")
}

input BlogPostUpdateInput {
    content: String @NonNull @Auth(action: update, subject: BlogPost, field: "content")
    authorId: ID @NonNull @Auth(action: update, subject: BlogPost, field: "author") @Auth(action: read, subject: Person, field: "id")
    authorDisplayName: String @Auth(action: update, subject: BlogPost, field: "authorDisplayName")
    title: String @NonNull @Auth(action: update, subject: BlogPost, field: "title")
}

type Category {
    id: ID! @Auth(action: read, subject: Category, field: "id")
    name: String @Auth(action: read, subject: Category, field: "name")
    priority: Int! @Auth(action: read, subject: Category, field: "priority")
    parent: Category @Auth(action: read, subject: Category, field: "parent")
    children: [Category!] @Auth(action: read, subject: Category, field: "children")
    productions: [Production!] @Auth(action: read, subject: Category, field: "productions") @Auth(action: read, subject: Production)
}

input CategoryCreateInput {
    name: String @Auth(action: create, subject: Category, field: "name")
    """Defaults to 0."""
    priority: Int! = 0 @NonNull @Auth(action: create, subject: Category, field: "priority")
    parentId: ID @Auth(action: create, subject: Category, field: "parent") @Auth(action: read, subject: Category, field: "id")
}

input CategoryUpdateInput {
    name: String @Auth(action: update, subject: Category, field: "name")
    priority: Int @NonNull @Auth(action: update, subject: Category, field: "priority")
    parentId: ID @Auth(action: update, subject: Category, field: "parent") @Auth(action: read, subject: Category, field: "id")
}

type ContactSubmissionAssignee {
    id: ID! @Auth(action: read, subject: ContactSubmissionAssignee, field: "id")
    submission: ContactSubmission! @Auth(action: read, subject: ContactSubmissionAssignee, field: "submission") @Auth(action: read, subject: ContactSubmission)
    user: User! @Auth(action: read, subject: ContactSubmissionAssignee, field: "user") @Auth(action: read, subject: User)
    timestamp: DateTime! @Auth(action: read, subject: ContactSubmissionAssignee, field: "timestamp")
}

input ContactSubmissionAssigneeCreateInput {
    submissionId: ID! @NonNull @Auth(action: create, subject: ContactSubmissionAssignee, field: "submission") @Auth(action: read, subject: ContactSubmission, field: "id")
    userId: ID! @NonNull @Auth(action: create, subject: ContactSubmissionAssignee, field: "user") @Auth(action: read, subject: User, field: "id")
}

type ContactSubmission {
    id: ID! @Auth(action: read, subject: ContactSubmission, field: "id")
    email: EmailAddress! @Auth(action: read, subject: ContactSubmission, field: "email")
    name: String! @Auth(action: read, subject: ContactSubmission, field: "name")
    timestamp: DateTime! @Auth(action: read, subject: ContactSubmission, field: "timestamp")
    resolved: Boolean! @Auth(action: read, subject: ContactSubmission, field: "resolved")
    additionalData: JSONObject @Auth(action: read, subject: ContactSubmission, field: "additionalData")
    assignees: [ContactSubmissionAssignee!] @Auth(action: read, subject: ContactSubmission, field: "assignees") @Auth(action: read, subject: ContactSubmissionAssignee)
}

input ContactSubmissionCreateInput {
    email: EmailAddress! @NonNull @Auth(action: create, subject: ContactSubmission, field: "email")
    name: String! @NonNull @Auth(action: create, subject: ContactSubmission, field: "name")
    additionalData: JSONObject @Auth(action: create, subject: ContactSubmission, field: "additionalData")
}

input ContactSubmissionUpdateInput {
    resolved: Boolean @Auth(action: update, subject: ContactSubmission, field: "resolved")
    additionalData: JSONObject @Auth(action: update, subject: ContactSubmission, field: "additionalData")
}

type Credit {
    id: ID! @Auth(action: read, subject: Credit, field: "id")
    production: Production! @Auth(action: read, subject: Credit, field: "production") @Auth(action: read, subject: Production)
    person: Person! @Auth(action: read, subject: Credit, field: "person") @Auth(action: read, subject: Person)
    title: String @Auth(action: read, subject: Credit, field: "title")
    priority: Int! @Auth(action: read, subject: Credit, field: "priority")
}

input CreditCreateInput {
    productionId: ID! @NonNull @Auth(action: create, subject: Credit, field: "production") @Auth(action: read, subject: Production, field: "id")
    personId: ID! @NonNull @Auth(action: create, subject: Credit, field: "person") @Auth(action: read, subject: Person, field: "id")
    title: String @Auth(action: create, subject: Credit, field: "title")
    """Defaults to 0."""
    priority: Int! = 0 @NonNull @Auth(action: create, subject: Credit, field: "priority")
}

input CreditUpdateInput {
    productionId: ID @NonNull @Auth(action: update, subject: Credit, field: "production") @Auth(action: read, subject: Production, field: "id")
    personId: ID @NonNull @Auth(action: update, subject: Credit, field: "person") @Auth(action: read, subject: Person, field: "id")
    title: String @Auth(action: update, subject: Credit, field: "title")
    priority: Int @NonNull @Auth(action: update, subject: Credit, field: "priority")
}

type GroupPermission {
    id: ID! @Auth(action: read, subject: GroupPermission, field: "id")
    group: Group! @Auth(action: read, subject: GroupPermission, field: "group") @Auth(action: read, subject: Group)
    action: String! @Auth(action: read, subject: GroupPermission, field: "action")
    subject: [String!]! @Auth(action: read, subject: GroupPermission, field: "subject")
    fields: [String!] @Auth(action: read, subject: GroupPermission, field: "fields")
    conditions: JSONObject @Auth(action: read, subject: GroupPermission, field: "conditions")
    inverted: Boolean! @Auth(action: read, subject: GroupPermission, field: "inverted")
    reason: String @Auth(action: read, subject: GroupPermission, field: "reason")
}


input GroupPermissionCreateInput {
    groupId: ID! @NonNull @Auth(action: create, subject: GroupPermission, field: "group") @Auth(action: read, subject: Group, field: "id")
    action: String! @NonNull @Auth(action: create, subject: GroupPermission, field: "action")
    subject: [String!]! @NonNull @Auth(action: create, subject: GroupPermission, field: "subject")
    fields: [String!] @Auth(action: create, subject: GroupPermission, field: "fields")
    conditions: JSONObject @Auth(action: create, subject: GroupPermission, field: "conditions")
    inverted: Boolean = false @NonNull @Auth(action: create, subject: GroupPermission, field: "inverted")
    reason: String @Auth(action: create, subject: GroupPermission, field: "reason")
}

input GroupPermissionUpdateInput {
    # Connected group cannot be updated. Delete & create new.
    action: String @NonNull @Auth(action: update, subject: GroupPermission, field: "action")
    subject: [String!] @NonNull @Auth(action: update, subject: GroupPermission, field: "subject")
    fields: [String!] @Auth(action: update, subject: GroupPermission, field: "fields")
    conditions: JSONObject @Auth(action: update, subject: GroupPermission, field: "conditions")
    inverted: Boolean @Auth(action: update, subject: GroupPermission, field: "inverted")
    reason: String @Auth(action: update, subject: GroupPermission, field: "reason")
}

type Group {
    id: ID! @Auth(action: read, subject: Group, field: "id")
    name: String! @Auth(action: read, subject: Group, field: "name")
    parent: Group @Auth(action: read, subject: Group, field: "parent")
    priority: Int! @Auth(action: read, subject: Group, field: "priority")
    permissions: [GroupPermission!] @Auth(action: read, subject: Group, field: "permissions") @Auth(action: read, subject: GroupPermission)
    children: [Group!] @Auth(action: read, subject: Group, field: "children") @Auth(action: read, subject: Group)
    users: [UserGroup!] @Auth(action: read, subject: Group, field: "users") @Auth(action: read, subject: UserGroup)
}

input GroupCreateInput {
    name: String! @NonNull @Auth(action: create, subject: Group, field: "name")
    parentId: ID @Auth(action: create, subject: Group, field: "parent") @Auth(action: read, subject: Group, field: "id")
    """Defaults to 0."""
    priority: Int! = 0 @NonNull @Auth(action: create, subject: Group, field: "priority")
}

input GroupUpdateInput {
    name: String @NonNull @Auth(action: update, subject: Group, field: "name")
    parentId: ID @Auth(action: update, subject: Group, field: "parent") @Auth(action: read, subject: Group, field: "id")
    priority: Int @NonNull @Auth(action: update, subject: Group, field: "priority")
}

type Image {
    id: ID! @Auth(action: read, subject: Image, field: "id")
    name: String! @Auth(action: read, subject: Image, field: "name")
    description: String @Auth(action: read, subject: Image, field: "description")
    path: String! @Auth(action: read, subject: Image, field: "path")
    people: [PersonImage!] @Auth(action: read, subject: Image, field: "people") @Auth(action: read, subject: PersonImage)
    imageFor: [ProductionImage!] @Auth(action: read, subject: Image, field: "imageFor") @Auth(action: read, subject: ProductionImage)
    thumbnailFor: [Production!] @Auth(action: read, subject: Image, field: "thumbnailFor") @Auth(action: read, subject: Production)
}

input ImageCreateInput {
    name: String! @NonNull @Auth(action: create, subject: Image, field: "name")
    description: String @Auth(action: create, subject: Image, field: "description")
    path: String! @NonNull @Auth(action: create, subject: Image, field: "path")
}

input ImageUpdateInput {
    name: String @NonNull @Auth(action: update, subject: Image, field: "name")
    description: String @Auth(action: update, subject: Image, field: "description")
    path: String @NonNull @Auth(action: update, subject: Image, field: "path")
}

type Person {
    id: ID! @Auth(action: read, subject: Person, field: "id")
    name: String! @Auth(action: read, subject: Person, field: "name")
    pronouns: String @Auth(action: read, subject: Person, field: "pronouns")
    graduation: DateTime @Auth(action: read, subject: Person, field: "graduation")
    start: DateTime! @Auth(action: read, subject: Person, field: "start")
    end: DateTime @Auth(action: read, subject: Person, field: "end")
    description: String @Auth(action: read, subject: Person, field: "description")
    images: [PersonImage!] @Auth(action: read, subject: Person, field: "images") @Auth(action: read, subject: PersonImage)
    blogPosts: [BlogPost!] @Auth(action: read, subject: Person, field: "blogPosts") @Auth(action: read, subject: BlogPost)
    credits: [Credit!] @Auth(action: read, subject: Person, field: "credits") @Auth(action: read, subject: Credit)
    roles: [Role!] @Auth(action: read, subject: Person, field: "roles") @Auth(action: read, subject: Role)
    users: [User!] @Auth(action: read, subject: Person, field: "users") @Auth(action: read, subject: User)
}

input PersonCreateInput {
    name: String! @NonNull @Auth(action: create, subject: Person, field: "name")
    pronouns: String @Auth(action: create, subject: Person, field: "pronouns")
    graduation: DateTime @Auth(action: create, subject: Person, field: "graduation")
    """Defaults to now."""
    start: DateTime @NonNull @Auth(action: create, subject: Person, field: "start")
    end: DateTime @Auth(action: create, subject: Person, field: "end")
    description: String @Auth(action: create, subject: Person, field: "description")
}

input PersonUpdateInput {
    name: String @NonNull @Auth(action: update, subject: Person, field: "name")
    pronouns: String @Auth(action: update, subject: Person, field: "pronouns")
    graduation: DateTime @Auth(action: update, subject: Person, field: "graduation")
    start: DateTime @NonNull @Auth(action: update, subject: Person, field: "start")
    end: DateTime @Auth(action: update, subject: Person, field: "end")
    description: String @Auth(action: update, subject: Person, field: "description")
}

type PersonImage {
    id: ID! @Auth(action: read, subject: PersonImage, field: "id")
    image: Image! @Auth(action: read, subject: PersonImage, field: "image") @Auth(action: read, subject: Image)
    person: Person! @Auth(action: read, subject: PersonImage, field: "person") @Auth(action: read, subject: Person)
    priority: Int! @Auth(action: read, subject: PersonImage, field: "priority")
}

input PersonImageCreateInput {
    imageId: ID! @NonNull @Auth(action: create, subject: PersonImage, field: "image") @Auth(action: read, subject: Image, field: "id")
    personId: ID! @NonNull @Auth(action: create, subject: PersonImage, field: "person") @Auth(action: read, subject: Person, field: "id")
    """Defaults to 0."""
    priority: Int! = 0 @NonNull @Auth(action: create, subject: PersonImage, field: "priority")
}

input PersonImageUpdateInput {
    # Person ID and image ID cannot be updated. Delete and recreate instead.
    priority: Int @NonNull @Auth(action: update, subject: PersonImage, field: "priority")
}

type ProductionImage {
    id: ID! @Auth(action: read, subject: ProductionImage, field: "id")
    production: Production! @Auth(action: read, subject: ProductionImage, field: "production") @Auth(action: read, subject: Production)
    image: Image! @Auth(action: read, subject: ProductionImage, field: "image") @Auth(action: read, subject: Image)
    priority: Int! @Auth(action: read, subject: ProductionImage, field: "priority")
}

input ProductionImageCreateInput {
    productionId: ID! @NonNull @Auth(action: create, subject: ProductionImage, field: "production") @Auth(action: read, subject: Production, field: "id")
    imageId: ID! @NonNull @Auth(action: create, subject: ProductionImage, field: "image") @Auth(action: read, subject: Image, field: "id")
    """Defaults to 0."""
    priority: Int! = 0 @NonNull @Auth(action: create, subject: ProductionImage, field: "priority")
}

input ProductionImageUpdateInput {
    # Production ID and image ID cannot be updated. Delete and recreate instead.
    priority: Int @NonNull @Auth(action: update, subject: ProductionImage, field: "priority")
}

type ProductionRSVP {
    id: ID! @Auth(action: read, subject: ProductionRSVP, field: "id")
    production: Production! @Auth(action: read, subject: ProductionRSVP, field: "production") @Auth(action: read, subject: Production)
    user: User! @Auth(action: read, subject: ProductionRSVP, field: "user") @Auth(action: read, subject: User)
    willAttend: ProductionRSVPAttendanceState @Auth(action: read, subject: ProductionRSVP, field: "willAttend")
    notes: String @Auth(action: read, subject: ProductionRSVP, field: "notes")
}

input ProductionRSVPCreateInput {
    productionId: ID! @NonNull @Auth(action: create, subject: ProductionRSVP, field: "production") @Auth(action: read, subject: Production, field: "id")
    userId: ID! @NonNull @Auth(action: create, subject: ProductionRSVP, field: "user") @Auth(action: read, subject: User, field: "id")
    willAttend: ProductionRSVPAttendanceState @Auth(action: create, subject: ProductionRSVP, field: "willAttend")
    notes: String @Auth(action: create, subject: ProductionRSVP, field: "notes")
}

input ProductionRSVPUpdateInput {
    # Production ID and user ID can't be updated. Delete and recreate instead.
    willAttend: ProductionRSVPAttendanceState @Auth(action: update, subject: ProductionRSVP, field: "willAttend")
    notes: String @Auth(action: update, subject: ProductionRSVP, field: "notes")
}

type ProductionTag {
    id: ID! @Auth(action: read, subject: ProductionTag, field: "id")
    production: Production! @Auth(action: read, subject: ProductionTag, field: "production") @Auth(action: read, subject: Production)
    tag: String! @Auth(action: read, subject: ProductionTag, field: "tag")
}

input ProductionTagCreateInput {
    productionId: ID! @NonNull @Auth(action: create, subject: ProductionTag, field: "production") @Auth(action: read, subject: Production, field: "id")
    tag: String! @NonNull @Auth(action: create, subject: ProductionTag, field: "tag")
}

type ProductionVideo {
    id: ID! @Auth(action: read, subject: ProductionVideo, field: "id")
    production: Production! @Auth(action: read, subject: ProductionVideo, field: "production") @Auth(action: read, subject: Production)
    video: Video! @Auth(action: read, subject: ProductionVideo, field: "video") @Auth(action: read, subject: Video)
    priority: Int! @Auth(action: read, subject: ProductionVideo, field: "priority")
}

input ProductionVideoCreateInput {
    productionId: ID! @NonNull @Auth(action: create, subject: ProductionVideo, field: "production") @Auth(action: read, subject: Production, field: "id")
    videoId: ID! @NonNull @Auth(action: create, subject: ProductionVideo, field: "video") @Auth(action: read, subject: Video, field: "id")
    priority: Int! = 0 @NonNull @Auth(action: create, subject: ProductionVideo, field: "priority")
}

input ProductionVideoUpdateInput {
    # Production ID and video ID cannot be updated. Delete and recreate instead.
    priority: Int @NonNull @Auth(action: update, subject: ProductionVideo, field: "priority")
}

type Production {
    id: ID! @Auth(action: read, subject: Production, field: "id")
    name: String! @Auth(action: read, subject: Production, field: "name")
    description: String @Auth(action: read, subject: Production, field: "description")
    startTime: DateTime @Auth(action: read, subject: Production, field: "startTime")
    endTime: DateTime @Auth(action: read, subject: Production, field: "endTime")
    isLive: Boolean! @Auth(action: read, subject: Production, field: "isLive")
    category: Category @Auth(action: read, subject: Production, field: "category") @Auth(action: read, subject: Category)
    closetLocation: String @Auth(action: read, subject: Production, field: "closetLocation")
    eventLocation: String @Auth(action: read, subject: Production, field: "eventLocation")
    teamNotes: String @Auth(action: read, subject: Production, field: "teamNotes")
    discordServer: String @Auth(action: read, subject: Production, field: "discordServer")
    discordChannel: String @Auth(action: read, subject: Production, field: "discordChannel")
    thumbnail: Image @Auth(action: read, subject: Production, field: "thumbnail") @Auth(action: read, subject: Image)
    closetTime: DateTime @Auth(action: read, subject: Production, field: "closetTime")
    images: [ProductionImage!] @Auth(action: read, subject: Production, field: "images") @Auth(action: read, subject: ProductionImage)
    rsvps: [ProductionRSVP!] @Auth(action: read, subject: Production ,field: "rsvps") @Auth(action: read, subject: ProductionRSVP)
    tags: [ProductionTag!] @Auth(action: read, subject: Production, field: "tags") @Auth(action: read, subject: ProductionTag)
    videos: [ProductionVideo!] @Auth(action: read, subject: Production, field: "videos") @Auth(action: read, subject: ProductionVideo)
    credits: [Credit!] @Auth(action: read, subject: Production, field: "credits") @Auth(action: read, subject: Credit)
}

input ProductionCreateInput {
    name: String! @NonNull @Auth(action: create, subject: Production, field: "name")
    description: String @Auth(action: create, subject: Production, field: "description")
    startTime: DateTime @NonNull @Auth(action: create, subject: Production, field: "startTime")
    endTime: DateTime @NonNull @Auth(action: create, subject: Production, field: "endTime")
    """Defaults to false."""
    isLive: Boolean! = false @NonNull @Auth(action: create, subject: Production, field: "isLive")
    categoryId: ID @Auth(action: create, subject: Production, field: "category") @Auth(action: read, subject: Category, field: "id")
    closetLocation: String @Auth(action: create, subject: Production, field: "closetLocation")
    eventLocation: String @Auth(action: create, subject: Production, field: "eventLocation")
    teamNotes: String @Auth(action: create, subject: Production, field: "teamNotes")
    discordServer: String @Auth(action: create, subject: Production, field: "discordServer")
    discordChannel: String @Auth(action: create, subject: Production, field: "discordChannel")
    thumbnailId: ID @Auth(action: create, subject: Production, field: "thumbnail") @Auth(action: read, subject: Image, field: "id")
    closetTime: DateTime @Auth(action: create, subject: Production, field: "closetTime")
}

input ProductionUpdateInput {
    name: String @NonNull @Auth(action: update, subject: Production, field: "name")
    description: String @Auth(action: update, subject: Production, field: "description")
    startTime: DateTime @NonNull @Auth(action: update, subject: Production, field: "startTime")
    endTime: DateTime @NonNull @Auth(action: update, subject: Production, field: "endTime")
    isLive: Boolean @NonNull @Auth(action: update, subject: Production, field: "isLive")
    categoryId: ID @Auth(action: update, subject: Production, field: "category") @Auth(action: read, subject: Category, field: "id")
    closetLocation: String @Auth(action: update, subject: Production, field: "closetLocation")
    eventLocation: String @Auth(action: update, subject: Production, field: "eventLocation")
    teamNotes: String @Auth(action: update, subject: Production, field: "teamNotes")
    discordServer: String @Auth(action: update, subject: Production, field: "discordServer")
    discordChannel: String @Auth(action: update, subject: Production, field: "discordChannel")
    thumbnailId: ID @Auth(action: update, subject: Production, field: "thumbnail") @Auth(action: read, subject: Image, field: "id")
    closetTime: DateTime @Auth(action: update, subject: Production, field: "closetTime")
}

type Redirect {
    id: ID! @Auth(action: read, subject: Redirect, field: "id")
    key: String! @Auth(action: read, subject: Redirect, field: "key")
    location: String! @Auth(action: read, subject: Redirect, field: "location")
    expires: DateTime @Auth(action: read, subject: Redirect, field: "expires")
}

input RedirectCreateInput {
    key: String! @NonNull @Auth(action: create, subject: Redirect, field: "key")
    location: String! @NonNull @Auth(action: create, subject: Redirect, field: "location")
    expires: DateTime @Auth(action: create, subject: Redirect, field: "expires")
}

input RedirectUpdateInput {
    key: String @NonNull @Auth(action: update, subject: Redirect, field: "key")
    location: String @NonNull @Auth(action: update, subject: Redirect, field: "location")
    expires: DateTime @Auth(action: update, subject: Redirect, field: "expires")
}

type Role {
    id: ID! @Auth(action: read, subject: Role, field: "id")
    person: Person! @Auth(action: read, subject: Role, field: "person") @Auth(action: read, subject: Person)
    name: String! @Auth(action: read, subject: Role, field: "name")
    startTime: DateTime! @Auth(action: read, subject: Role, field: "startTime")
    endTime: DateTime @Auth(action: read, subject: Role, field: "endTime")
    priority: Int! @Auth(action: read, subject: Role, field: "priority")
}

input RoleCreateInput {
    personId: ID! @NonNull @Auth(action: create, subject: Role, field: "person") @Auth(action: read, subject: Person, field: "id")
    name: String! @NonNull @Auth(action: create, subject: Role, field: "name")
    startTime: DateTime @NonNull @Auth(action: create, subject: Role, field: "startTime")
    endTime: DateTime @Auth(action: create, subject: Role, field: "endTime")
    """Defaults to 0."""
    priority: Int! = 0 @NonNull @Auth(action: create, subject: Role, field: "priority")
}

input RoleUpdateInput {
    personId: ID @NonNull @Auth(action: update, subject: Role, field: "person") @Auth(action: read, subject: Person, field: "id")
    name: String @NonNull @Auth(action: update, subject: Role, field: "name")
    startTime: DateTime @NonNull @Auth(action: update, subject: Role, field: "startTime")
    endTime: DateTime @Auth(action: update, subject: Role, field: "endTime")
    priority: Int @NonNull @Auth(action: update, subject: Role, field: "priority")
}

type Stream {
    id: ID! @Auth(action: read, subject: Stream, field: "id")
    from: String! @Auth(action: read, subject: Stream, field: "from")
    to: String! @Auth(action: read, subject: Stream, field: "to")
    message: String @Auth(action: read, subject: Stream, field: "message")
}

input StreamCreateInput {
    from: String! @NonNull @Auth(action: create, subject: Stream, field: "from")
    to: String! @NonNull @Auth(action: create, subject: Stream, field: "to")
}

type UserGroup {
    id: ID! @Auth(action: read, subject: UserGroup, field: "id")
    user: User! @Auth(action: read, subject: UserGroup, field: "user") @Auth(action: read, subject: User)
    group: Group! @Auth(action: read, subject: UserGroup, field: "group") @Auth(action: read, subject: Group)
}

input UserGroupCreateInput {
    userId: ID! @NonNull @Auth(action: create, subject: UserGroup, field: "user") @Auth(action: read, subject: User, field: "id")
    groupId: ID! @NonNull @Auth(action: create, subject: UserGroup, field: "group") @Auth(action: read, subject: Group, field: "id")
}

type UserPermission {
    id: ID! @Auth(action: read, subject: UserPermission, field: "id")
    user: User! @Auth(action: read, subject: UserPermission, field: "user") @Auth(action: read, subject: User)
    action: String! @Auth(action: read, subject: UserPermission, field: "action")
    subject: [String!]! @Auth(action: read, subject: UserPermission, field: "subject")
    fields: [String!] @Auth(action: read, subject: UserPermission, field: "fields")
    conditions: JSONObject @Auth(action: read, subject: UserPermission, field: "conditions")
    inverted: Boolean! @Auth(action: read, subject: UserPermission, field: "inverted")
    reason: String @Auth(action: read, subject: UserPermission, field: "reason")
}

input UserPermissionCreateInput {
    userId: ID! @NonNull @Auth(action: create, subject: UserPermission, field: "user") @Auth(action: read, subject: User, field: "id")
    action: String! @NonNull @Auth(action: create, subject: UserPermission, field: "action")
    subject: [String!]! @NonNull @Auth(action: create, subject: UserPermission, field: "subject")
    fields: [String!] @Auth(action: create, subject: UserPermission, field: "fields")
    conditions: JSONObject @Auth(action: create, subject: UserPermission, field: "conditions")
    inverted: Boolean @NonNull @Auth(action: create, subject: UserPermission, field: "inverted")
    reason: String @Auth(action: create, subject: UserPermission, field: "reason")
}

input UserPermissionUpdateInput {
    # Connected user cannot be updated. Delete & create new.
    action: String @NonNull @Auth(action: update, subject: UserPermission, field: "action")
    subject: [String!] @NonNull @Auth(action: update, subject: UserPermission, field: "subject")
    fields: [String!] @Auth(action: update, subject: UserPermission, field: "fields")
    conditions: JSONObject @Auth(action: update, subject: UserPermission, field: "conditions")
    inverted: Boolean @NonNull @Auth(action: update, subject: UserPermission, field: "inverted")
    reason: String @Auth(action: update, subject: UserPermission, field: "reason")
}

type User {
    id: ID! @Auth(action: read, subject: User, field: "id")
    username: String! @Auth(action: read, subject: User, field: "username")
    mail: EmailAddress! @Auth(action: read, subject: User, field: "mail")
    person: Person @Auth(action: read, subject: User, field: "person")
    discord: String @Auth(action: read, subject: User, field: "discord")
    joined: DateTime! @Auth(action: read, subject: User, field: "joined")
    permissions: [UserPermission!] @Auth(action: read, subject: User, field: "permissions") @Auth(action: read, subject: UserPermission)
    groups: [UserGroup!] @Auth(action: read, subject: User, field: "groups") @Auth(action: read, subject: UserGroup)
    accessLogs: [AccessLog!] @Auth(action: read, subject: User, field: "accessLogs") @Auth(action: read, subject: AccessLog)
    auditLogs: [AuditLog!] @Auth(action: read, subject: User, field: "auditLogs") @Auth(action: read, subject: AuditLog)
    assignedContactSubmissions: [ContactSubmissionAssignee!] @Auth(action: read, subject: User, field: "assignedContactSubmissions") @Auth(action: read, subject: ContactSubmissionAssignee)
    productionRsvps: [ProductionRSVP!] @Auth(action: read, subject: User, field: "productionRsvps") @Auth(action: read, subject: ProductionRSVP)
    voteResponses: [VoteResponse!] @Auth(action: read, subject: User, field: "voteResponses") @Auth(action: read, subject: VoteResponse)
    checkedOutAssets: [Asset!] @Auth(action: read, subject: User, field: "checkedOutAssets") @Auth(action: read, subject: Asset)
}

input UserCreateInput {
    username: String! @NonNull @Auth(action: create, subject: User, field: "username")
    mail: EmailAddress! @NonNull @Auth(action: create, subject: User, field: "mail")
    personId: ID @Auth(action: create, subject: User, field: "person") @Auth(action: read, subject: Person, field: "id")
    discord: String @Auth(action: create, subject: User, field: "discord")
    password: String @NonNull @Auth(action: create, subject: User, field: "password")
}

input UserUpdateInput {
    username: String @NonNull @Auth(action: update, subject: User, field: "username")
    mail: EmailAddress @NonNull @Auth(action: update, subject: User, field: "mail")
    personId: ID @Auth(action: update, subject: User, field: "person") @Auth(action: read, subject: Person, field: "id")
    discord: String @Auth(action: update, subject: User, field: "discord")
    password: String @Auth(action: update, subject: User, field: "password")
}

type Video {
    id: ID! @Auth(action: read, subject: Video, field: "id")
    name: String! @Auth(action: read, subject: Video, field: "name")
    format: VideoFormat! @Auth(action: read, subject: Video, field: "format")
    metadata: JSONObject @Auth(action: read, subject: Video, field: "metadata")
    videoFor: [ProductionVideo!] @Auth(action: read, subject: Video, field: "videoFor") @Auth(action: read, subject: ProductionVideo)
}

input VideoCreateInput {
    name: String! @NonNull @Auth(action: create, subject: Video, field: "name")
    format: VideoFormat! @NonNull @Auth(action: create, subject: Video, field: "format")
    metadata: JSONObject @Auth(action: create, subject: Video, field: "metadata")
}

input VideoUpdateInput {
    name: String @NonNull @Auth(action: update, subject: Video, field: "name")
    format: VideoFormat @NonNull @Auth(action: update, subject: Video, field: "format")
    metadata: JSONObject @Auth(action: update, subject: Video, field: "metadata")
}

type VoteResponse {
    id: ID! @Auth(action: read, subject: VoteResponse, field: "id")
    vote: Vote! @Auth(action: read, subject: VoteResponse, field: "vote") @Auth(action: read, subject: Vote)
    user: User! @Auth(action: read, subject: VoteResponse, field: "user") @Auth(action: read, subject: User)
    timestamp: DateTime! @Auth(action: read, subject: VoteResponse, field: "timestamp")
    selection: String! @Auth(action: read, subject: VoteResponse, field: "selection")
}

input VoteResponseCreateInput {
    voteId: ID! @NonNull @Auth(action: create, subject: VoteResponse, field: "vote") @Auth(action: read, subject: Vote, field: "id")
    userId: ID! @NonNull @Auth(action: create, subject: VoteResponse, field: "user") @Auth(action: read, subject: User, field: "id")
    selection: String! @NonNull @Auth(action: create, subject: VoteResponse, field: "selection")
}

input VoteResponseUpdateInput {
    # Cannot update the vote ID or user ID. Delete and recreate instead.
    selection: String @NonNull @Auth(action: update, subject: VoteResponse, field: "selection")
}

type Vote {
    id: ID! @Auth(action: read, subject: Vote, field: "id")
    question: String! @Auth(action: read, subject: Vote, field: "question")
    options: [String!]! @Auth(action: read, subject: Vote, field: "options")
    expires: DateTime @Auth(action: read, subject: Vote, field: "expires")
    description: String @Auth(action: read, subject: Vote, field: "description")
    responses: [VoteResponse!] @Auth(action: read, subject: Vote, field: "responses") @Auth(action: read, subject: VoteResponse)
}

input VoteCreateInput {
    question: String! @NonNull @Auth(action: create, subject: Vote, field: "question")
    options: [String!]! @NonNull @Auth(action: create, subject: Vote, field: "options")
    expires: DateTime @Auth(action: create, subject: Vote, field: "expires")
    description: String @Auth(action: create, subject: Vote, field: "description")
}

input VoteUpdateInput {
    question: String @NonNull @Auth(action: update, subject: Vote, field: "question")
    options: [String!] @NonNull @Auth(action: update, subject: Vote, field: "options")
    expires: DateTime @Auth(action: update, subject: Vote, field: "expires")
    description: String @Auth(action: update, subject: Vote, field: "description")
}
