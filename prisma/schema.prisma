generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AccessLog {
  userId    BigInt   @db.BigInt @map("user")
  service   String   @db.VarChar(100)
  timestamp DateTime @default(now()) @db.Timestamp(6)
  ip        String?  @db.VarChar(60)
  id        BigInt   @db.BigInt @id(map: "access_logs_pk") @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], map: "access_logs_users_id_fk")

  @@index([userId, timestamp], map: "access_logs_userId_timestamp_index")
  @@index([timestamp], map: "access_logs_timestamp_index")
  @@map("access_logs")
}

model AlertLog {
  id        BigInt   @db.BigInt @id(map: "alert_logs_pk") @default(autoincrement())
  message   String   @db.VarChar(300)
  severity  String   @db.VarChar(8)
  timestamp DateTime @default(now()) @db.Timestamp(6)

  @@index([severity, timestamp], map: "alert_logs_severity_timestamp_index")
  @@index([timestamp], map: "alert_logs_timestamp_index")
  @@map("alert_logs")
}

model Asset {
  id                 BigInt    @db.BigInt @id(map: "assets_pk") @default(autoincrement())
  tag                Int?
  name               String    @db.VarChar(150)
  lastKnownLocation  String?   @map("last_known_location") @db.VarChar(100)
  lastKnownHandlerId BigInt?   @db.BigInt @map("last_known_handler")
  isLost             Boolean   @default(false) @map("is_lost")
  notes              String?   @db.VarChar(500)
  purchasePrice      Int?      @map("purchase_price")
  purchaseLocation   String?   @map("purchase_location") @db.VarChar(1000)
  purchaseDate       DateTime? @map("purchase_date") @db.Date
  modelNumber        String?   @map("model_number") @db.VarChar(100)
  serialNumber       String?   @map("serial_number") @db.VarChar(100)
  parentId           BigInt?   @db.BigInt @map("parent")
  lastKnownHandler   User?     @relation("assetsTousers", fields: [lastKnownHandlerId], references: [id], onDelete: Restrict, map: "assets_users_id_fk")
  parent             Asset?    @relation("assetsToassets_parent", fields: [parentId], references: [id], onDelete: Restrict, map: "assets_assets_id_fk")
  children           Asset[]   @relation("assetsToassets_parent")

  @@index([lastKnownHandlerId, tag], map: "assets_last_known_handler_tag_index")
  @@index([lastKnownLocation, tag], map: "assets_last_known_location_tag_index")
  @@index([purchasePrice, tag], map: "assets_purchase_price_tag_index")
  @@index([purchaseDate, tag], map: "assets_purchase_date_tag_index")
  @@index([name, tag], map: "assets_name_tag_index")
  @@index([tag], map: "assets_tag_index")
  @@map("assets")
}

model AuditLog {
  id               BigInt   @db.BigInt @id(map: "audit_logs_pk") @default(autoincrement())
  message          String?  @db.VarChar(300)
  userId           BigInt?  @db.BigInt @map("user")
  timestamp        DateTime @default(now()) @db.Timestamp(6)
  subject          String?  @map("subject") @db.VarChar(50)
  identifier       BigInt?  @db.BigInt
  newValue         Json?    @map("new_value") @db.Json
  oldValue         Json?    @map("old_value") @db.Json
  user             User?    @relation(fields: [userId], references: [id], onDelete: Restrict, map: "audit_logs_users_id_fk")

  @@index([timestamp], map: "audit_logs_timestamp_index")
  @@index([userId, timestamp], map: "audit_logs_userId_timestamp_index")
  @@map("audit_logs")
}

model BlogPost {
  id                BigInt   @db.BigInt @id(map: "blog_pk") @default(autoincrement())
  postedAt          DateTime @default(now()) @map("posted_at") @db.Timestamp(6)
  content           String
  authorId          BigInt   @db.BigInt @map("author")
  authorDisplayName String?  @map("author_display_name") @db.VarChar(100)
  title             String   @db.VarChar(150)
  author            Person   @relation(fields: [authorId], references: [id], map: "blog_people_id_fk")

  @@index([authorId, postedAt], map: "blog_posts_author_posted_at_index")
  @@index([authorDisplayName, postedAt], map: "blog_posts_author_display_name_posted_at_index")
  @@index([title, postedAt], map: "blog_posts_title_posted_at_index")
  @@index([postedAt], map: "blog_posts_posted_at_index")
  @@map("blog_posts")
}

model Category {
  id          BigInt       @db.BigInt @id(map: "categories_pk") @default(autoincrement())
  name        String?      @db.VarChar(50)
  priority    Int          @default(0)
  parentId    BigInt?      @db.BigInt @map("parent")
  parent      Category?    @relation("CategoryToCategory_parentId", fields: [parentId], references: [id], onDelete: Restrict, map: "categories_categories_id_fk")
  children    Category[]   @relation("CategoryToCategory_parentId")
  productions Production[]

  @@index([priority, name], map: "categories_priority_name_index")
  @@index([parentId, name], map: "categories_parent_name_index")
  @@index([name], map: "categories_name_index")
  @@map("categories")
}

model ContactSubmission {
  id             BigInt   @db.BigInt @id(map: "contact_submissions_pk") @unique(map: "contact_submissions_id_uindex") @default(autoincrement())
  email          String   @db.VarChar(300)
  name           String   @db.VarChar(100)
  subject        String   @db.VarChar(100)
  body           String   @db.VarChar(1000)
  timestamp      DateTime @default(now()) @db.Timestamp(6)
  resolved       Boolean  @default(false)
  additionalData Json?    @map("additional_data") @db.Json

  @@index([email, timestamp], map: "contact_submissions_email_timestamp_index")
  @@index([name, timestamp], map: "contact_submissions_name_timestamp_index")
  @@index([subject, timestamp], map: "contact_submissions_subject_timestamp_index")
  @@index([resolved, timestamp], map: "contact_submissions_resolved_timestamp_index")
  @@index([timestamp], map: "contact_submissions_timestamp_index")
  @@map("contact_submissions")
}

model Credit {
  productionId BigInt     @db.BigInt @map("production")
  personId     BigInt     @db.BigInt @map("person")
  title        String?    @db.VarChar(100)
  priority     Int        @default(0)
  id           BigInt     @db.BigInt @id(map: "credits_pk") @default(autoincrement())
  person       Person     @relation(fields: [personId], references: [id], map: "credits_people_id_fk")
  production   Production @relation(fields: [productionId], references: [id], map: "credits_productions_id_fk")

  @@unique([productionId, personId], map: "credits_pk_2")
  @@index([personId, productionId], map: "credits_person_production_index")
  @@index([productionId, priority, title], map: "credits_production_priority_title_index")
  @@map("credits")
}

model Group {
  id                BigInt            @db.BigInt @id(map: "groups_pk") @default(autoincrement())
  name              String            @db.VarChar(50)
  parentId          BigInt?           @db.BigInt @map("parent")
  priority          Int               @default(0)
  parent            Group?            @relation("GroupToGroup_parentId", fields: [parentId], references: [id], onDelete: Restrict, map: "groups_groups_id_fk")
  permissions       GroupPermission[] @relation("group_permissionsTogroups")
  children          Group[]           @relation("GroupToGroup_parentId")
  users             UserGroup[]       @relation("groupsTouser_groups")

  @@index([parentId, priority, name], map: "groups_parent_priority_name_index")
  @@index([priority, name], map: "groups_priority_name_index")
  @@index([parentId, name], map: "groups_parent_name_index")
  @@index([name], map: "groups_name_index")
  @@map("groups")
}

model GroupPermission {
  id         BigInt   @db.BigInt @id(map: "group_permissions_pk") @default(autoincrement())
  groupId    BigInt   @db.BigInt @map("group")
  action     String   @db.VarChar(100)
  subject    String[] @db.VarChar(300)
  fields     String[] @db.VarChar(100)
  conditions Json?    @db.Json
  inverted   Boolean  @default(false)
  reason     String?  @db.VarChar(300)
  group      Group    @relation("group_permissionsTogroups", fields: [groupId], references: [id], map: "group_permissions_groups_id_fk")

  @@index([groupId, subject, action], map: "group_permissions_group_subject_action_index")
  @@index([groupId, action, subject], map: "group_permissions_group_action_subject_index")
  @@index([groupId, inverted, subject, action], map: "group_permissions_group_inverted_subject_action_index")
  @@index([groupId, inverted, action, subject], map: "group_permissions_group_inverted_action_subject_index")
  @@map("group_permissions")
}

model Image {
  id                BigInt            @db.BigInt @id(map: "images_pk") @unique(map: "images_id_uindex") @default(autoincrement())
  name              String            @db.VarChar(50)
  description       String?           @db.VarChar(200)
  path              String            @db.VarChar(1000)
  people            PersonImage[]
  productions       ProductionImage[]
  thumbnailFor      Production[]
  profilePictureFor Person[]

  @@index([name], map: "images_name_index")
  @@index([path], map: "images_path_index")
  @@map("images")
}

model Person {
  id               BigInt        @db.BigInt @id(map: "people_pk") @unique(map: "people_id_uindex") @default(autoincrement())
  name             String        @db.VarChar(100)
  pronouns         String?       @db.VarChar(20)
  graduation       DateTime?     @db.Date
  profilePictureId BigInt?       @db.BigInt @map("profile_picture")
  profilePicture   Image?        @relation(fields: [profilePictureId], references: [id], map: "people_images_id_fk")
  description      String?
  blogPosts        BlogPost[]
  credits          Credit[]
  images           PersonImage[]
  roles            PersonRole[]
  users            User[]

  @@index([graduation, name], map: "people_graduation_name_index")
  @@index([name], map: "people_name_index")
  @@map("people")
}

model PersonImage {
  imageId  BigInt @db.BigInt @map("image")
  personId BigInt @db.BigInt @map("person")
  priority Int    @default(0)
  id       BigInt @db.BigInt @id(map: "people_images_pk") @default(autoincrement())
  image    Image  @relation(fields: [imageId], references: [id], map: "people_images_images_id_fk")
  person   Person @relation(fields: [personId], references: [id], map: "people_images_people_id_fk")

  @@unique([imageId, personId], map: "people_images_pk_2")
  @@index([personId], map: "people_images_person_index")
  @@map("people_images")
}

model PersonRole {
  id        BigInt    @db.BigInt @id(map: "people_roles_pk") @default(autoincrement())
  personId  BigInt    @db.BigInt @map("person")
  roleId    BigInt    @db.BigInt @map("role")
  startTime DateTime  @default(now()) @map("start_time") @db.Timestamp(6)
  endTime   DateTime? @map("end_time") @db.Timestamp(6)
  person    Person    @relation(fields: [personId], references: [id], map: "people_roles_people_id_fk")
  role      Role      @relation(fields: [roleId], references: [id], map: "people_roles_roles_id_fk")

  @@index([personId, startTime], map: "people_roles_person_start_time_index")
  @@index([roleId, startTime], map: "people_roles_role_start_time_index")
  @@index([startTime], map: "people_roles_start_time_index")
  @@map("people_roles")
}

model Production {
  id             BigInt            @db.BigInt @id(map: "productions_pk") @default(autoincrement())
  name           String            @db.VarChar(100)
  description    String?
  startTime      DateTime?         @map("start_time") @db.Timestamp(6)
  endTime        DateTime?         @map("end_time") @db.Timestamp(6)
  categoryId     BigInt?           @db.BigInt @map("category")
  closetLocation String?           @map("closet_location") @db.VarChar(100)
  eventLocation  String?           @map("event_location") @db.VarChar(100)
  teamNotes      String?           @map("team_notes")
  discordServer  String?           @map("discord_server") @db.Char(18)
  discordChannel String?           @map("discord_channel") @db.Char(18)
  thumbnailId    BigInt?           @db.BigInt @map("thumbnail")
  closetTime     DateTime?         @map("closet_time") @db.Timestamp(6)
  category       Category?         @relation(fields: [categoryId], references: [id], onDelete: Restrict, map: "productions_categories_id_fk")
  thumbnail      Image?            @relation(fields: [thumbnailId], references: [id], onDelete: Restrict, map: "productions_images_id_fk")
  credits        Credit[]
  images         ProductionImage[] @relation("production_imagesToproductions")
  rsvps          ProductionRSVP[]
  tags           ProductionTag[]
  videos         ProductionVideo[]

  @@index([categoryId, startTime, name], map: "productions_category_start_time_name_index")
  @@index([startTime, name], map: "productions_start_time_name_index")
  @@index([name], map: "productions_name_index")
  @@map("productions")
}

model ProductionImage {
  productionId BigInt     @db.BigInt @map("production")
  imageId      BigInt     @db.BigInt @map("image")
  priority     Int        @default(0)
  id           BigInt     @db.BigInt @id(map: "production_images_pk") @default(autoincrement())
  image        Image      @relation(fields: [imageId], references: [id], map: "production_images_images_id_fk")
  production   Production @relation("production_imagesToproductions", fields: [productionId], references: [id], map: "production_images_productions_id_fk")

  @@unique([productionId, imageId], map: "production_images_pk_2")
  @@index([productionId, imageId, priority], map: "production_images_production_image_priority_index")
  @@index([imageId, productionId, priority], map: "production_images_image_production_priority_index")
  @@index([productionId, priority], map: "production_images_production_priority_index")
  @@map("production_images")
}

model ProductionRSVP {
  productionId BigInt     @db.BigInt @map("production")
  userId       BigInt     @db.BigInt @map("user")
  willAttend   String?    @map("will_attend") @db.VarChar(5)
  notes        String?
  id           BigInt     @db.BigInt @id(map: "production_rsvps_pk") @default(autoincrement())
  production   Production @relation(fields: [productionId], references: [id], map: "production_rsvps_productions_id_fk")
  user         User       @relation(fields: [userId], references: [id], map: "production_rsvps_users_id_fk")

  @@unique([productionId, userId], map: "production_rsvps_pk_2")
  @@index([productionId, userId, willAttend], map: "production_rsvps_production_user_will_attend_index")
  @@index([userId, willAttend], map: "production_rsvps_user_will_attend_index")
  @@index([productionId, willAttend], map: "production_rsvps_production_will_attend_index")
  @@map("production_rsvps")
}

model ProductionTag {
  productionId BigInt     @db.BigInt @map("production")
  tag          String     @db.VarChar(50)
  id           BigInt     @db.BigInt @id(map: "production_tags_pk") @default(autoincrement())
  production   Production @relation(fields: [productionId], references: [id], map: "production_tags_productions_id_fk")

  @@unique([productionId, tag], map: "production_tags_pk_2")
  @@index([tag], map: "production_tags_tag_index")
  @@map("production_tags")
}

model ProductionVideo {
  productionId BigInt     @db.BigInt @map("production")
  videoId      BigInt     @db.BigInt @map("video")
  priority     Int        @default(0)
  id           BigInt     @db.BigInt @id(map: "production_videos_pk") @default(autoincrement())
  production   Production @relation(fields: [productionId], references: [id], map: "production_videos_productions_id_fk")
  video        Video      @relation(fields: [videoId], references: [id], map: "production_videos_videos_id_fk")

  @@unique([productionId, videoId], map: "production_videos_pk_2")
  @@index([productionId, videoId, priority], map: "production_videos_production_video_priority_index")
  @@index([videoId, productionId, priority], map: "production_videos_video_production_priority_index")
  @@index([productionId, priority], map: "production_videos_production_priority_index")
  @@map("production_videos")
}

model Redirect {
  key      String    @unique(map: "redirects_pk_2") @db.VarChar(100)
  location String    @db.VarChar(3000)
  expires  DateTime? @db.Timestamp(6)
  id       BigInt    @db.BigInt @id(map: "redirects_pk") @default(autoincrement())

  @@index([key, expires], map: "redirects_key_expires_index")
  @@index([expires], map: "redirects_expires_index")
  @@index([location], map: "redirects_location_index")
  @@map("redirects")
}

model Role {
  id          BigInt       @db.BigInt @id(map: "roles_pk") @default(autoincrement())
  name        String       @db.VarChar(100)
  description String?      @db.VarChar(1000)
  people      PersonRole[]

  @@index([name], map: "roles_name_index")
  @@map("roles")
}

model User {
  id                         BigInt           @db.BigInt @id(map: "users_pk") @default(autoincrement())
  username                   String           @unique(map: "users_username_uindex") @db.VarChar(8)
  mail                       String           @unique(map: "users_mail_uindex") @db.VarChar(300)
  personId                   BigInt?          @db.BigInt @map("person")
  discord                    String?          @unique(map: "users_discord_uindex") @db.Char(18)
  password                   String?          @db.VarChar(300)
  joined                     DateTime         @default(now()) @db.Timestamp(6)
  person                     Person?          @relation(fields: [personId], references: [id], onDelete: Restrict, map: "users_people_id_fk")
  accessLogs                 AccessLog[]
  checkedOutAssets           Asset[]          @relation("assetsTousers")
  auditLogs                  AuditLog[]
  productionRsvps            ProductionRSVP[]
  groups                     UserGroup[]      @relation("user_groupsTousers")
  permissions                UserPermission[] @relation("user_permissionsTousers")
  voteResponses              VoteResponse[]

  @@index([personId], map: "users_person_index")
  @@index([joined], map: "users_joined_index")
  @@map("users")
}

model UserGroup {
  id      BigInt @db.BigInt @id(map: "user_groups_pk") @default(autoincrement())
  userId  BigInt @db.BigInt @map("user")
  groupId BigInt @db.BigInt @map("group")
  group   Group  @relation("groupsTouser_groups", fields: [groupId], references: [id], map: "user_groups_groups_id_fk")
  user    User   @relation("user_groupsTousers", fields: [userId], references: [id], map: "user_groups_users_id_fk")

  @@unique([userId, groupId], map: "user_groups_pk_2")
  @@index([groupId, userId], map: "user_groups_group_user_index")
  @@map("user_groups")
}

model UserPermission {
  id         BigInt   @db.BigInt @id(map: "user_permissions_pk") @default(autoincrement())
  userId     BigInt   @db.BigInt @map("user")
  action     String   @db.VarChar(100)
  subject    String[] @db.VarChar(300)
  fields     String[] @db.VarChar(100)
  conditions Json?    @db.Json
  inverted   Boolean  @default(false)
  reason     String?  @db.VarChar(300)
  user       User     @relation("user_permissionsTousers", fields: [userId], references: [id], map: "user_permissions_users_id_fk")

  @@index([userId, subject, action], map: "user_permissions_user_subject_action_index")
  @@index([userId, action, subject], map: "user_permissions_user_action_subject_index")
  @@index([userId, inverted, subject, action], map: "user_permissions_user_inverted_subject_action_index")
  @@index([userId, inverted, action, subject], map: "user_permissions_user_inverted_action_subject_index")
  @@map("user_permissions")
}

model Video {
  id       BigInt            @db.BigInt @id(map: "videos_pk") @default(autoincrement())
  name     String            @db.VarChar(100)
  format   String            @db.VarChar(32)
  metadata Json?             @db.Json
  videoFor ProductionVideo[]

  @@index([name], map: "videos_name_index")
  @@index([format], map: "videos_format_index")
  @@map("videos")
}

model Vote {
  id          BigInt         @db.BigInt @id(map: "votes_pk") @default(autoincrement())
  question    String         @db.VarChar(200)
  options     String[]       @db.VarChar(200)
  expires     DateTime?      @db.Timestamp(6)
  description String?
  responses   VoteResponse[]

  @@index([question, expires], map: "votes_question_index")
  @@index([expires], map: "votes_expires_index")
  @@map("votes")
}

model VoteResponse {
  voteId    BigInt   @db.BigInt @map("vote")
  userId    BigInt   @db.BigInt @map("user")
  timestamp DateTime @default(now()) @db.Timestamp(6)
  id        BigInt   @db.BigInt @id(map: "vote_responses_pk") @default(autoincrement())
  selection String   @db.VarChar(200)
  user      User     @relation(fields: [userId], references: [id], map: "vote_responses_users_id_fk")
  vote      Vote     @relation(fields: [voteId], references: [id], map: "vote_responses_votes_id_fk")

  @@unique([voteId, userId], map: "vote_responses_pk_2")
  @@index([voteId, userId, timestamp], map: "vote_responses_vote_user_timestamp_index")
  @@index([voteId, timestamp], map: "vote_responses_vote_timestamp_index")
  @@index([userId, voteId, timestamp], map: "vote_responses_user_vote_timestamp_index")
  @@index([userId, timestamp], map: "vote_responses_user_timestamp_index")
  @@index([timestamp], map: "vote_responses_timestamp_index")
  @@map("vote_responses")
}
